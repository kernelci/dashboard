"""
Django settings for kernelCI project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from utils.validation import isBooleanOrStringTrue
import os
import json


def get_json_env_var(name, default):
    var = os.environ.get(name)
    if not var:
        return default
    try:
        return json.loads(var)
    except json.JSONDecodeError:
        if isinstance(default, str) or isinstance(default, bool):
            return var
        raise


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_json_env_var(
    "DJANGO_SECRET_KEY", "django-insecure--!70an0r@i00)oqf!3uq_)9dx2^%)"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ENV_DEBUG = get_json_env_var("DEBUG", False)

if isBooleanOrStringTrue(ENV_DEBUG):
    DEBUG = True

DEBUG_SQL_QUERY = False

ENV_DEBUG_SQL_QUERY = get_json_env_var("DEBUG_SQL_QUERY", False)

if isBooleanOrStringTrue(ENV_DEBUG_SQL_QUERY) and DEBUG:
    DEBUG_SQL_QUERY = True

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 31536000


ALLOWED_HOSTS = get_json_env_var(
    "ALLOWED_HOSTS",
    ["localhost"],
)

# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "kernelCI_app",
    "rest_framework",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "kernelCI.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "kernelCI.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": get_json_env_var(
        "DB_DEFAULT",
        {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "kernelci",
            "USER": "kernelci",
            "PASSWORD": "kernelci-db-password",
            "HOST": "127.0.0.1",
            "OPTIONS": {
                "connect_timeout": 5,
            },
        },
    )
}


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "ecom",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


class DisableMigrations:
    def __contains__(self, item):
        return True

    def __getitem__(self, item):
        return None


MIGRATION_MODULES = DisableMigrations()

CORS_ALLOW_ALL_ORIGINS = False

CACHE_TIMEOUT = int(get_json_env_var("CACHE_TIMEOUT", "600"))

if DEBUG:
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^http://localhost",  # dashboard dev server
    ]
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 3600
    CACHE_TIMEOUT = 0

if DEBUG_SQL_QUERY:
    LOGGING = {
        "disable_existing_loggers": False,
        "version": 1,
        "handlers": {
            "console": {
                # logging handler that outputs log messages to terminal
                "class": "logging.StreamHandler",
                "level": "DEBUG",  # message level to be written to console
            },
        },
        "loggers": {
            "": {
                # this sets root level logger to log debug and higher level
                # logs to console. All other loggers inherit settings from
                # root level logger.
                "handlers": ["console"],
                "level": "DEBUG",
                "propagate": False,  # this tells logger to send logging message
                # to its parent (will send if set to True)
            },
            "django.db": {
                # django also has database level logging
                "level": "DEBUG"
            },
        },
    }
