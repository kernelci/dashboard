/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TreeRouteImport } from './routes/tree/route'
import { Route as IssueRouteImport } from './routes/issue/route'
import { Route as HardwareRouteImport } from './routes/hardware/route'
import { Route as IndexImport } from './routes/index'
import { Route as TreeIndexImport } from './routes/tree/index'
import { Route as IssueIndexImport } from './routes/issue/index'
import { Route as HardwareIndexImport } from './routes/hardware/index'
import { Route as TreeTreeIdRouteImport } from './routes/tree/$treeId/route'
import { Route as TestTestIdRouteImport } from './routes/test/$testId/route'
import { Route as IssueIssueIdRouteImport } from './routes/issue/$issueId/route'
import { Route as HardwareHardwareIdRouteImport } from './routes/hardware/$hardwareId/route'
import { Route as BuildBuildIdRouteImport } from './routes/build/$buildId/route'
import { Route as alternativesIRouteImport } from './routes/(alternatives)/i/route'
import { Route as TreeTreeIdIndexImport } from './routes/tree/$treeId/index'
import { Route as TestTestIdIndexImport } from './routes/test/$testId/index'
import { Route as IssueIssueIdIndexImport } from './routes/issue/$issueId/index'
import { Route as HardwareHardwareIdIndexImport } from './routes/hardware/$hardwareId/index'
import { Route as BuildBuildIdIndexImport } from './routes/build/$buildId/index'
import { Route as alternativesIIndexImport } from './routes/(alternatives)/i/index'
import { Route as HardwareHardwareIdTestRouteImport } from './routes/hardware/$hardwareId/test/route'
import { Route as HardwareHardwareIdBuildRouteImport } from './routes/hardware/$hardwareId/build/route'
import { Route as HardwareHardwareIdBootRouteImport } from './routes/hardware/$hardwareId/boot/route'
import { Route as alternativesTTestIdRouteImport } from './routes/(alternatives)/t/$testId/route'
import { Route as alternativesIIssueIdRouteImport } from './routes/(alternatives)/i/$issueId/route'
import { Route as alternativesBBuildIdRouteImport } from './routes/(alternatives)/b/$buildId/route'
import { Route as TreeTreeNameBranchIndexImport } from './routes/tree/$treeName/$branch/index'
import { Route as HardwareHardwareIdTestIndexImport } from './routes/hardware/$hardwareId/test/index'
import { Route as HardwareHardwareIdBuildIndexImport } from './routes/hardware/$hardwareId/build/index'
import { Route as HardwareHardwareIdBootIndexImport } from './routes/hardware/$hardwareId/boot/index'
import { Route as alternativesTTestIdIndexImport } from './routes/(alternatives)/t/$testId/index'
import { Route as alternativesIIssueIdIndexImport } from './routes/(alternatives)/i/$issueId/index'
import { Route as alternativesBBuildIdIndexImport } from './routes/(alternatives)/b/$buildId/index'
import { Route as TreeTreeIdTestTestIdRouteImport } from './routes/tree/$treeId/test/$testId/route'
import { Route as TreeTreeIdTestTestIdIndexImport } from './routes/tree/$treeId/test/$testId/index'
import { Route as TreeTreeIdBuildBuildIdIndexImport } from './routes/tree/$treeId/build/$buildId/index'
import { Route as HardwareHardwareIdTestTestIdIndexImport } from './routes/hardware/$hardwareId/test/$testId/index'
import { Route as HardwareHardwareIdBuildBuildIdIndexImport } from './routes/hardware/$hardwareId/build/$buildId/index'
import { Route as HardwareHardwareIdBootBootIdIndexImport } from './routes/hardware/$hardwareId/boot/$bootId/index'

// Create/Update Routes

const TreeRouteRoute = TreeRouteImport.update({
  id: '/tree',
  path: '/tree',
  getParentRoute: () => rootRoute,
} as any)

const IssueRouteRoute = IssueRouteImport.update({
  id: '/issue',
  path: '/issue',
  getParentRoute: () => rootRoute,
} as any)

const HardwareRouteRoute = HardwareRouteImport.update({
  id: '/hardware',
  path: '/hardware',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TreeIndexRoute = TreeIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TreeRouteRoute,
} as any)

const IssueIndexRoute = IssueIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => IssueRouteRoute,
} as any)

const HardwareIndexRoute = HardwareIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HardwareRouteRoute,
} as any)

const TreeTreeIdRouteRoute = TreeTreeIdRouteImport.update({
  id: '/$treeId',
  path: '/$treeId',
  getParentRoute: () => TreeRouteRoute,
} as any)

const TestTestIdRouteRoute = TestTestIdRouteImport.update({
  id: '/test/$testId',
  path: '/test/$testId',
  getParentRoute: () => rootRoute,
} as any)

const IssueIssueIdRouteRoute = IssueIssueIdRouteImport.update({
  id: '/$issueId',
  path: '/$issueId',
  getParentRoute: () => IssueRouteRoute,
} as any)

const HardwareHardwareIdRouteRoute = HardwareHardwareIdRouteImport.update({
  id: '/$hardwareId',
  path: '/$hardwareId',
  getParentRoute: () => HardwareRouteRoute,
} as any)

const BuildBuildIdRouteRoute = BuildBuildIdRouteImport.update({
  id: '/build/$buildId',
  path: '/build/$buildId',
  getParentRoute: () => rootRoute,
} as any)

const alternativesIRouteRoute = alternativesIRouteImport.update({
  id: '/(alternatives)/i',
  path: '/i',
  getParentRoute: () => rootRoute,
} as any)

const TreeTreeIdIndexRoute = TreeTreeIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TreeTreeIdRouteRoute,
} as any)

const TestTestIdIndexRoute = TestTestIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TestTestIdRouteRoute,
} as any)

const IssueIssueIdIndexRoute = IssueIssueIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => IssueIssueIdRouteRoute,
} as any)

const HardwareHardwareIdIndexRoute = HardwareHardwareIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HardwareHardwareIdRouteRoute,
} as any)

const BuildBuildIdIndexRoute = BuildBuildIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BuildBuildIdRouteRoute,
} as any)

const alternativesIIndexRoute = alternativesIIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => alternativesIRouteRoute,
} as any)

const HardwareHardwareIdTestRouteRoute =
  HardwareHardwareIdTestRouteImport.update({
    id: '/test',
    path: '/test',
    getParentRoute: () => HardwareHardwareIdRouteRoute,
  } as any)

const HardwareHardwareIdBuildRouteRoute =
  HardwareHardwareIdBuildRouteImport.update({
    id: '/build',
    path: '/build',
    getParentRoute: () => HardwareHardwareIdRouteRoute,
  } as any)

const HardwareHardwareIdBootRouteRoute =
  HardwareHardwareIdBootRouteImport.update({
    id: '/boot',
    path: '/boot',
    getParentRoute: () => HardwareHardwareIdRouteRoute,
  } as any)

const alternativesTTestIdRouteRoute = alternativesTTestIdRouteImport.update({
  id: '/(alternatives)/t/$testId',
  path: '/t/$testId',
  getParentRoute: () => rootRoute,
} as any)

const alternativesIIssueIdRouteRoute = alternativesIIssueIdRouteImport.update({
  id: '/$issueId',
  path: '/$issueId',
  getParentRoute: () => alternativesIRouteRoute,
} as any)

const alternativesBBuildIdRouteRoute = alternativesBBuildIdRouteImport.update({
  id: '/(alternatives)/b/$buildId',
  path: '/b/$buildId',
  getParentRoute: () => rootRoute,
} as any)

const TreeTreeNameBranchIndexRoute = TreeTreeNameBranchIndexImport.update({
  id: '/$treeName/$branch/',
  path: '/$treeName/$branch/',
  getParentRoute: () => TreeRouteRoute,
} as any)

const HardwareHardwareIdTestIndexRoute =
  HardwareHardwareIdTestIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => HardwareHardwareIdTestRouteRoute,
  } as any)

const HardwareHardwareIdBuildIndexRoute =
  HardwareHardwareIdBuildIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => HardwareHardwareIdBuildRouteRoute,
  } as any)

const HardwareHardwareIdBootIndexRoute =
  HardwareHardwareIdBootIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => HardwareHardwareIdBootRouteRoute,
  } as any)

const alternativesTTestIdIndexRoute = alternativesTTestIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => alternativesTTestIdRouteRoute,
} as any)

const alternativesIIssueIdIndexRoute = alternativesIIssueIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => alternativesIIssueIdRouteRoute,
} as any)

const alternativesBBuildIdIndexRoute = alternativesBBuildIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => alternativesBBuildIdRouteRoute,
} as any)

const TreeTreeIdTestTestIdRouteRoute = TreeTreeIdTestTestIdRouteImport.update({
  id: '/test/$testId',
  path: '/test/$testId',
  getParentRoute: () => TreeTreeIdRouteRoute,
} as any)

const TreeTreeIdTestTestIdIndexRoute = TreeTreeIdTestTestIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TreeTreeIdTestTestIdRouteRoute,
} as any)

const TreeTreeIdBuildBuildIdIndexRoute =
  TreeTreeIdBuildBuildIdIndexImport.update({
    id: '/build/$buildId/',
    path: '/build/$buildId/',
    getParentRoute: () => TreeTreeIdRouteRoute,
  } as any)

const HardwareHardwareIdTestTestIdIndexRoute =
  HardwareHardwareIdTestTestIdIndexImport.update({
    id: '/$testId/',
    path: '/$testId/',
    getParentRoute: () => HardwareHardwareIdTestRouteRoute,
  } as any)

const HardwareHardwareIdBuildBuildIdIndexRoute =
  HardwareHardwareIdBuildBuildIdIndexImport.update({
    id: '/$buildId/',
    path: '/$buildId/',
    getParentRoute: () => HardwareHardwareIdBuildRouteRoute,
  } as any)

const HardwareHardwareIdBootBootIdIndexRoute =
  HardwareHardwareIdBootBootIdIndexImport.update({
    id: '/$bootId/',
    path: '/$bootId/',
    getParentRoute: () => HardwareHardwareIdBootRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/hardware': {
      id: '/hardware'
      path: '/hardware'
      fullPath: '/hardware'
      preLoaderRoute: typeof HardwareRouteImport
      parentRoute: typeof rootRoute
    }
    '/issue': {
      id: '/issue'
      path: '/issue'
      fullPath: '/issue'
      preLoaderRoute: typeof IssueRouteImport
      parentRoute: typeof rootRoute
    }
    '/tree': {
      id: '/tree'
      path: '/tree'
      fullPath: '/tree'
      preLoaderRoute: typeof TreeRouteImport
      parentRoute: typeof rootRoute
    }
    '/(alternatives)/i': {
      id: '/(alternatives)/i'
      path: '/i'
      fullPath: '/i'
      preLoaderRoute: typeof alternativesIRouteImport
      parentRoute: typeof rootRoute
    }
    '/build/$buildId': {
      id: '/build/$buildId'
      path: '/build/$buildId'
      fullPath: '/build/$buildId'
      preLoaderRoute: typeof BuildBuildIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/hardware/$hardwareId': {
      id: '/hardware/$hardwareId'
      path: '/$hardwareId'
      fullPath: '/hardware/$hardwareId'
      preLoaderRoute: typeof HardwareHardwareIdRouteImport
      parentRoute: typeof HardwareRouteImport
    }
    '/issue/$issueId': {
      id: '/issue/$issueId'
      path: '/$issueId'
      fullPath: '/issue/$issueId'
      preLoaderRoute: typeof IssueIssueIdRouteImport
      parentRoute: typeof IssueRouteImport
    }
    '/test/$testId': {
      id: '/test/$testId'
      path: '/test/$testId'
      fullPath: '/test/$testId'
      preLoaderRoute: typeof TestTestIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/tree/$treeId': {
      id: '/tree/$treeId'
      path: '/$treeId'
      fullPath: '/tree/$treeId'
      preLoaderRoute: typeof TreeTreeIdRouteImport
      parentRoute: typeof TreeRouteImport
    }
    '/hardware/': {
      id: '/hardware/'
      path: '/'
      fullPath: '/hardware/'
      preLoaderRoute: typeof HardwareIndexImport
      parentRoute: typeof HardwareRouteImport
    }
    '/issue/': {
      id: '/issue/'
      path: '/'
      fullPath: '/issue/'
      preLoaderRoute: typeof IssueIndexImport
      parentRoute: typeof IssueRouteImport
    }
    '/tree/': {
      id: '/tree/'
      path: '/'
      fullPath: '/tree/'
      preLoaderRoute: typeof TreeIndexImport
      parentRoute: typeof TreeRouteImport
    }
    '/(alternatives)/b/$buildId': {
      id: '/(alternatives)/b/$buildId'
      path: '/b/$buildId'
      fullPath: '/b/$buildId'
      preLoaderRoute: typeof alternativesBBuildIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/(alternatives)/i/$issueId': {
      id: '/(alternatives)/i/$issueId'
      path: '/$issueId'
      fullPath: '/i/$issueId'
      preLoaderRoute: typeof alternativesIIssueIdRouteImport
      parentRoute: typeof alternativesIRouteImport
    }
    '/(alternatives)/t/$testId': {
      id: '/(alternatives)/t/$testId'
      path: '/t/$testId'
      fullPath: '/t/$testId'
      preLoaderRoute: typeof alternativesTTestIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/hardware/$hardwareId/boot': {
      id: '/hardware/$hardwareId/boot'
      path: '/boot'
      fullPath: '/hardware/$hardwareId/boot'
      preLoaderRoute: typeof HardwareHardwareIdBootRouteImport
      parentRoute: typeof HardwareHardwareIdRouteImport
    }
    '/hardware/$hardwareId/build': {
      id: '/hardware/$hardwareId/build'
      path: '/build'
      fullPath: '/hardware/$hardwareId/build'
      preLoaderRoute: typeof HardwareHardwareIdBuildRouteImport
      parentRoute: typeof HardwareHardwareIdRouteImport
    }
    '/hardware/$hardwareId/test': {
      id: '/hardware/$hardwareId/test'
      path: '/test'
      fullPath: '/hardware/$hardwareId/test'
      preLoaderRoute: typeof HardwareHardwareIdTestRouteImport
      parentRoute: typeof HardwareHardwareIdRouteImport
    }
    '/(alternatives)/i/': {
      id: '/(alternatives)/i/'
      path: '/'
      fullPath: '/i/'
      preLoaderRoute: typeof alternativesIIndexImport
      parentRoute: typeof alternativesIRouteImport
    }
    '/build/$buildId/': {
      id: '/build/$buildId/'
      path: '/'
      fullPath: '/build/$buildId/'
      preLoaderRoute: typeof BuildBuildIdIndexImport
      parentRoute: typeof BuildBuildIdRouteImport
    }
    '/hardware/$hardwareId/': {
      id: '/hardware/$hardwareId/'
      path: '/'
      fullPath: '/hardware/$hardwareId/'
      preLoaderRoute: typeof HardwareHardwareIdIndexImport
      parentRoute: typeof HardwareHardwareIdRouteImport
    }
    '/issue/$issueId/': {
      id: '/issue/$issueId/'
      path: '/'
      fullPath: '/issue/$issueId/'
      preLoaderRoute: typeof IssueIssueIdIndexImport
      parentRoute: typeof IssueIssueIdRouteImport
    }
    '/test/$testId/': {
      id: '/test/$testId/'
      path: '/'
      fullPath: '/test/$testId/'
      preLoaderRoute: typeof TestTestIdIndexImport
      parentRoute: typeof TestTestIdRouteImport
    }
    '/tree/$treeId/': {
      id: '/tree/$treeId/'
      path: '/'
      fullPath: '/tree/$treeId/'
      preLoaderRoute: typeof TreeTreeIdIndexImport
      parentRoute: typeof TreeTreeIdRouteImport
    }
    '/tree/$treeId/test/$testId': {
      id: '/tree/$treeId/test/$testId'
      path: '/test/$testId'
      fullPath: '/tree/$treeId/test/$testId'
      preLoaderRoute: typeof TreeTreeIdTestTestIdRouteImport
      parentRoute: typeof TreeTreeIdRouteImport
    }
    '/(alternatives)/b/$buildId/': {
      id: '/(alternatives)/b/$buildId/'
      path: '/'
      fullPath: '/b/$buildId/'
      preLoaderRoute: typeof alternativesBBuildIdIndexImport
      parentRoute: typeof alternativesBBuildIdRouteImport
    }
    '/(alternatives)/i/$issueId/': {
      id: '/(alternatives)/i/$issueId/'
      path: '/'
      fullPath: '/i/$issueId/'
      preLoaderRoute: typeof alternativesIIssueIdIndexImport
      parentRoute: typeof alternativesIIssueIdRouteImport
    }
    '/(alternatives)/t/$testId/': {
      id: '/(alternatives)/t/$testId/'
      path: '/'
      fullPath: '/t/$testId/'
      preLoaderRoute: typeof alternativesTTestIdIndexImport
      parentRoute: typeof alternativesTTestIdRouteImport
    }
    '/hardware/$hardwareId/boot/': {
      id: '/hardware/$hardwareId/boot/'
      path: '/'
      fullPath: '/hardware/$hardwareId/boot/'
      preLoaderRoute: typeof HardwareHardwareIdBootIndexImport
      parentRoute: typeof HardwareHardwareIdBootRouteImport
    }
    '/hardware/$hardwareId/build/': {
      id: '/hardware/$hardwareId/build/'
      path: '/'
      fullPath: '/hardware/$hardwareId/build/'
      preLoaderRoute: typeof HardwareHardwareIdBuildIndexImport
      parentRoute: typeof HardwareHardwareIdBuildRouteImport
    }
    '/hardware/$hardwareId/test/': {
      id: '/hardware/$hardwareId/test/'
      path: '/'
      fullPath: '/hardware/$hardwareId/test/'
      preLoaderRoute: typeof HardwareHardwareIdTestIndexImport
      parentRoute: typeof HardwareHardwareIdTestRouteImport
    }
    '/tree/$treeName/$branch/': {
      id: '/tree/$treeName/$branch/'
      path: '/$treeName/$branch'
      fullPath: '/tree/$treeName/$branch'
      preLoaderRoute: typeof TreeTreeNameBranchIndexImport
      parentRoute: typeof TreeRouteImport
    }
    '/hardware/$hardwareId/boot/$bootId/': {
      id: '/hardware/$hardwareId/boot/$bootId/'
      path: '/$bootId'
      fullPath: '/hardware/$hardwareId/boot/$bootId'
      preLoaderRoute: typeof HardwareHardwareIdBootBootIdIndexImport
      parentRoute: typeof HardwareHardwareIdBootRouteImport
    }
    '/hardware/$hardwareId/build/$buildId/': {
      id: '/hardware/$hardwareId/build/$buildId/'
      path: '/$buildId'
      fullPath: '/hardware/$hardwareId/build/$buildId'
      preLoaderRoute: typeof HardwareHardwareIdBuildBuildIdIndexImport
      parentRoute: typeof HardwareHardwareIdBuildRouteImport
    }
    '/hardware/$hardwareId/test/$testId/': {
      id: '/hardware/$hardwareId/test/$testId/'
      path: '/$testId'
      fullPath: '/hardware/$hardwareId/test/$testId'
      preLoaderRoute: typeof HardwareHardwareIdTestTestIdIndexImport
      parentRoute: typeof HardwareHardwareIdTestRouteImport
    }
    '/tree/$treeId/build/$buildId/': {
      id: '/tree/$treeId/build/$buildId/'
      path: '/build/$buildId'
      fullPath: '/tree/$treeId/build/$buildId'
      preLoaderRoute: typeof TreeTreeIdBuildBuildIdIndexImport
      parentRoute: typeof TreeTreeIdRouteImport
    }
    '/tree/$treeId/test/$testId/': {
      id: '/tree/$treeId/test/$testId/'
      path: '/'
      fullPath: '/tree/$treeId/test/$testId/'
      preLoaderRoute: typeof TreeTreeIdTestTestIdIndexImport
      parentRoute: typeof TreeTreeIdTestTestIdRouteImport
    }
  }
}

// Create and export the route tree

interface HardwareHardwareIdBootRouteRouteChildren {
  HardwareHardwareIdBootIndexRoute: typeof HardwareHardwareIdBootIndexRoute
  HardwareHardwareIdBootBootIdIndexRoute: typeof HardwareHardwareIdBootBootIdIndexRoute
}

const HardwareHardwareIdBootRouteRouteChildren: HardwareHardwareIdBootRouteRouteChildren =
  {
    HardwareHardwareIdBootIndexRoute: HardwareHardwareIdBootIndexRoute,
    HardwareHardwareIdBootBootIdIndexRoute:
      HardwareHardwareIdBootBootIdIndexRoute,
  }

const HardwareHardwareIdBootRouteRouteWithChildren =
  HardwareHardwareIdBootRouteRoute._addFileChildren(
    HardwareHardwareIdBootRouteRouteChildren,
  )

interface HardwareHardwareIdBuildRouteRouteChildren {
  HardwareHardwareIdBuildIndexRoute: typeof HardwareHardwareIdBuildIndexRoute
  HardwareHardwareIdBuildBuildIdIndexRoute: typeof HardwareHardwareIdBuildBuildIdIndexRoute
}

const HardwareHardwareIdBuildRouteRouteChildren: HardwareHardwareIdBuildRouteRouteChildren =
  {
    HardwareHardwareIdBuildIndexRoute: HardwareHardwareIdBuildIndexRoute,
    HardwareHardwareIdBuildBuildIdIndexRoute:
      HardwareHardwareIdBuildBuildIdIndexRoute,
  }

const HardwareHardwareIdBuildRouteRouteWithChildren =
  HardwareHardwareIdBuildRouteRoute._addFileChildren(
    HardwareHardwareIdBuildRouteRouteChildren,
  )

interface HardwareHardwareIdTestRouteRouteChildren {
  HardwareHardwareIdTestIndexRoute: typeof HardwareHardwareIdTestIndexRoute
  HardwareHardwareIdTestTestIdIndexRoute: typeof HardwareHardwareIdTestTestIdIndexRoute
}

const HardwareHardwareIdTestRouteRouteChildren: HardwareHardwareIdTestRouteRouteChildren =
  {
    HardwareHardwareIdTestIndexRoute: HardwareHardwareIdTestIndexRoute,
    HardwareHardwareIdTestTestIdIndexRoute:
      HardwareHardwareIdTestTestIdIndexRoute,
  }

const HardwareHardwareIdTestRouteRouteWithChildren =
  HardwareHardwareIdTestRouteRoute._addFileChildren(
    HardwareHardwareIdTestRouteRouteChildren,
  )

interface HardwareHardwareIdRouteRouteChildren {
  HardwareHardwareIdBootRouteRoute: typeof HardwareHardwareIdBootRouteRouteWithChildren
  HardwareHardwareIdBuildRouteRoute: typeof HardwareHardwareIdBuildRouteRouteWithChildren
  HardwareHardwareIdTestRouteRoute: typeof HardwareHardwareIdTestRouteRouteWithChildren
  HardwareHardwareIdIndexRoute: typeof HardwareHardwareIdIndexRoute
}

const HardwareHardwareIdRouteRouteChildren: HardwareHardwareIdRouteRouteChildren =
  {
    HardwareHardwareIdBootRouteRoute:
      HardwareHardwareIdBootRouteRouteWithChildren,
    HardwareHardwareIdBuildRouteRoute:
      HardwareHardwareIdBuildRouteRouteWithChildren,
    HardwareHardwareIdTestRouteRoute:
      HardwareHardwareIdTestRouteRouteWithChildren,
    HardwareHardwareIdIndexRoute: HardwareHardwareIdIndexRoute,
  }

const HardwareHardwareIdRouteRouteWithChildren =
  HardwareHardwareIdRouteRoute._addFileChildren(
    HardwareHardwareIdRouteRouteChildren,
  )

interface HardwareRouteRouteChildren {
  HardwareHardwareIdRouteRoute: typeof HardwareHardwareIdRouteRouteWithChildren
  HardwareIndexRoute: typeof HardwareIndexRoute
}

const HardwareRouteRouteChildren: HardwareRouteRouteChildren = {
  HardwareHardwareIdRouteRoute: HardwareHardwareIdRouteRouteWithChildren,
  HardwareIndexRoute: HardwareIndexRoute,
}

const HardwareRouteRouteWithChildren = HardwareRouteRoute._addFileChildren(
  HardwareRouteRouteChildren,
)

interface IssueIssueIdRouteRouteChildren {
  IssueIssueIdIndexRoute: typeof IssueIssueIdIndexRoute
}

const IssueIssueIdRouteRouteChildren: IssueIssueIdRouteRouteChildren = {
  IssueIssueIdIndexRoute: IssueIssueIdIndexRoute,
}

const IssueIssueIdRouteRouteWithChildren =
  IssueIssueIdRouteRoute._addFileChildren(IssueIssueIdRouteRouteChildren)

interface IssueRouteRouteChildren {
  IssueIssueIdRouteRoute: typeof IssueIssueIdRouteRouteWithChildren
  IssueIndexRoute: typeof IssueIndexRoute
}

const IssueRouteRouteChildren: IssueRouteRouteChildren = {
  IssueIssueIdRouteRoute: IssueIssueIdRouteRouteWithChildren,
  IssueIndexRoute: IssueIndexRoute,
}

const IssueRouteRouteWithChildren = IssueRouteRoute._addFileChildren(
  IssueRouteRouteChildren,
)

interface TreeTreeIdTestTestIdRouteRouteChildren {
  TreeTreeIdTestTestIdIndexRoute: typeof TreeTreeIdTestTestIdIndexRoute
}

const TreeTreeIdTestTestIdRouteRouteChildren: TreeTreeIdTestTestIdRouteRouteChildren =
  {
    TreeTreeIdTestTestIdIndexRoute: TreeTreeIdTestTestIdIndexRoute,
  }

const TreeTreeIdTestTestIdRouteRouteWithChildren =
  TreeTreeIdTestTestIdRouteRoute._addFileChildren(
    TreeTreeIdTestTestIdRouteRouteChildren,
  )

interface TreeTreeIdRouteRouteChildren {
  TreeTreeIdIndexRoute: typeof TreeTreeIdIndexRoute
  TreeTreeIdTestTestIdRouteRoute: typeof TreeTreeIdTestTestIdRouteRouteWithChildren
  TreeTreeIdBuildBuildIdIndexRoute: typeof TreeTreeIdBuildBuildIdIndexRoute
}

const TreeTreeIdRouteRouteChildren: TreeTreeIdRouteRouteChildren = {
  TreeTreeIdIndexRoute: TreeTreeIdIndexRoute,
  TreeTreeIdTestTestIdRouteRoute: TreeTreeIdTestTestIdRouteRouteWithChildren,
  TreeTreeIdBuildBuildIdIndexRoute: TreeTreeIdBuildBuildIdIndexRoute,
}

const TreeTreeIdRouteRouteWithChildren = TreeTreeIdRouteRoute._addFileChildren(
  TreeTreeIdRouteRouteChildren,
)

interface TreeRouteRouteChildren {
  TreeTreeIdRouteRoute: typeof TreeTreeIdRouteRouteWithChildren
  TreeIndexRoute: typeof TreeIndexRoute
  TreeTreeNameBranchIndexRoute: typeof TreeTreeNameBranchIndexRoute
}

const TreeRouteRouteChildren: TreeRouteRouteChildren = {
  TreeTreeIdRouteRoute: TreeTreeIdRouteRouteWithChildren,
  TreeIndexRoute: TreeIndexRoute,
  TreeTreeNameBranchIndexRoute: TreeTreeNameBranchIndexRoute,
}

const TreeRouteRouteWithChildren = TreeRouteRoute._addFileChildren(
  TreeRouteRouteChildren,
)

interface alternativesIIssueIdRouteRouteChildren {
  alternativesIIssueIdIndexRoute: typeof alternativesIIssueIdIndexRoute
}

const alternativesIIssueIdRouteRouteChildren: alternativesIIssueIdRouteRouteChildren =
  {
    alternativesIIssueIdIndexRoute: alternativesIIssueIdIndexRoute,
  }

const alternativesIIssueIdRouteRouteWithChildren =
  alternativesIIssueIdRouteRoute._addFileChildren(
    alternativesIIssueIdRouteRouteChildren,
  )

interface alternativesIRouteRouteChildren {
  alternativesIIssueIdRouteRoute: typeof alternativesIIssueIdRouteRouteWithChildren
  alternativesIIndexRoute: typeof alternativesIIndexRoute
}

const alternativesIRouteRouteChildren: alternativesIRouteRouteChildren = {
  alternativesIIssueIdRouteRoute: alternativesIIssueIdRouteRouteWithChildren,
  alternativesIIndexRoute: alternativesIIndexRoute,
}

const alternativesIRouteRouteWithChildren =
  alternativesIRouteRoute._addFileChildren(alternativesIRouteRouteChildren)

interface BuildBuildIdRouteRouteChildren {
  BuildBuildIdIndexRoute: typeof BuildBuildIdIndexRoute
}

const BuildBuildIdRouteRouteChildren: BuildBuildIdRouteRouteChildren = {
  BuildBuildIdIndexRoute: BuildBuildIdIndexRoute,
}

const BuildBuildIdRouteRouteWithChildren =
  BuildBuildIdRouteRoute._addFileChildren(BuildBuildIdRouteRouteChildren)

interface TestTestIdRouteRouteChildren {
  TestTestIdIndexRoute: typeof TestTestIdIndexRoute
}

const TestTestIdRouteRouteChildren: TestTestIdRouteRouteChildren = {
  TestTestIdIndexRoute: TestTestIdIndexRoute,
}

const TestTestIdRouteRouteWithChildren = TestTestIdRouteRoute._addFileChildren(
  TestTestIdRouteRouteChildren,
)

interface alternativesBBuildIdRouteRouteChildren {
  alternativesBBuildIdIndexRoute: typeof alternativesBBuildIdIndexRoute
}

const alternativesBBuildIdRouteRouteChildren: alternativesBBuildIdRouteRouteChildren =
  {
    alternativesBBuildIdIndexRoute: alternativesBBuildIdIndexRoute,
  }

const alternativesBBuildIdRouteRouteWithChildren =
  alternativesBBuildIdRouteRoute._addFileChildren(
    alternativesBBuildIdRouteRouteChildren,
  )

interface alternativesTTestIdRouteRouteChildren {
  alternativesTTestIdIndexRoute: typeof alternativesTTestIdIndexRoute
}

const alternativesTTestIdRouteRouteChildren: alternativesTTestIdRouteRouteChildren =
  {
    alternativesTTestIdIndexRoute: alternativesTTestIdIndexRoute,
  }

const alternativesTTestIdRouteRouteWithChildren =
  alternativesTTestIdRouteRoute._addFileChildren(
    alternativesTTestIdRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/hardware': typeof HardwareRouteRouteWithChildren
  '/issue': typeof IssueRouteRouteWithChildren
  '/tree': typeof TreeRouteRouteWithChildren
  '/i': typeof alternativesIRouteRouteWithChildren
  '/build/$buildId': typeof BuildBuildIdRouteRouteWithChildren
  '/hardware/$hardwareId': typeof HardwareHardwareIdRouteRouteWithChildren
  '/issue/$issueId': typeof IssueIssueIdRouteRouteWithChildren
  '/test/$testId': typeof TestTestIdRouteRouteWithChildren
  '/tree/$treeId': typeof TreeTreeIdRouteRouteWithChildren
  '/hardware/': typeof HardwareIndexRoute
  '/issue/': typeof IssueIndexRoute
  '/tree/': typeof TreeIndexRoute
  '/b/$buildId': typeof alternativesBBuildIdRouteRouteWithChildren
  '/i/$issueId': typeof alternativesIIssueIdRouteRouteWithChildren
  '/t/$testId': typeof alternativesTTestIdRouteRouteWithChildren
  '/hardware/$hardwareId/boot': typeof HardwareHardwareIdBootRouteRouteWithChildren
  '/hardware/$hardwareId/build': typeof HardwareHardwareIdBuildRouteRouteWithChildren
  '/hardware/$hardwareId/test': typeof HardwareHardwareIdTestRouteRouteWithChildren
  '/i/': typeof alternativesIIndexRoute
  '/build/$buildId/': typeof BuildBuildIdIndexRoute
  '/hardware/$hardwareId/': typeof HardwareHardwareIdIndexRoute
  '/issue/$issueId/': typeof IssueIssueIdIndexRoute
  '/test/$testId/': typeof TestTestIdIndexRoute
  '/tree/$treeId/': typeof TreeTreeIdIndexRoute
  '/tree/$treeId/test/$testId': typeof TreeTreeIdTestTestIdRouteRouteWithChildren
  '/b/$buildId/': typeof alternativesBBuildIdIndexRoute
  '/i/$issueId/': typeof alternativesIIssueIdIndexRoute
  '/t/$testId/': typeof alternativesTTestIdIndexRoute
  '/hardware/$hardwareId/boot/': typeof HardwareHardwareIdBootIndexRoute
  '/hardware/$hardwareId/build/': typeof HardwareHardwareIdBuildIndexRoute
  '/hardware/$hardwareId/test/': typeof HardwareHardwareIdTestIndexRoute
  '/tree/$treeName/$branch': typeof TreeTreeNameBranchIndexRoute
  '/hardware/$hardwareId/boot/$bootId': typeof HardwareHardwareIdBootBootIdIndexRoute
  '/hardware/$hardwareId/build/$buildId': typeof HardwareHardwareIdBuildBuildIdIndexRoute
  '/hardware/$hardwareId/test/$testId': typeof HardwareHardwareIdTestTestIdIndexRoute
  '/tree/$treeId/build/$buildId': typeof TreeTreeIdBuildBuildIdIndexRoute
  '/tree/$treeId/test/$testId/': typeof TreeTreeIdTestTestIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/hardware': typeof HardwareIndexRoute
  '/issue': typeof IssueIndexRoute
  '/tree': typeof TreeIndexRoute
  '/i': typeof alternativesIIndexRoute
  '/build/$buildId': typeof BuildBuildIdIndexRoute
  '/hardware/$hardwareId': typeof HardwareHardwareIdIndexRoute
  '/issue/$issueId': typeof IssueIssueIdIndexRoute
  '/test/$testId': typeof TestTestIdIndexRoute
  '/tree/$treeId': typeof TreeTreeIdIndexRoute
  '/b/$buildId': typeof alternativesBBuildIdIndexRoute
  '/i/$issueId': typeof alternativesIIssueIdIndexRoute
  '/t/$testId': typeof alternativesTTestIdIndexRoute
  '/hardware/$hardwareId/boot': typeof HardwareHardwareIdBootIndexRoute
  '/hardware/$hardwareId/build': typeof HardwareHardwareIdBuildIndexRoute
  '/hardware/$hardwareId/test': typeof HardwareHardwareIdTestIndexRoute
  '/tree/$treeName/$branch': typeof TreeTreeNameBranchIndexRoute
  '/hardware/$hardwareId/boot/$bootId': typeof HardwareHardwareIdBootBootIdIndexRoute
  '/hardware/$hardwareId/build/$buildId': typeof HardwareHardwareIdBuildBuildIdIndexRoute
  '/hardware/$hardwareId/test/$testId': typeof HardwareHardwareIdTestTestIdIndexRoute
  '/tree/$treeId/build/$buildId': typeof TreeTreeIdBuildBuildIdIndexRoute
  '/tree/$treeId/test/$testId': typeof TreeTreeIdTestTestIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/hardware': typeof HardwareRouteRouteWithChildren
  '/issue': typeof IssueRouteRouteWithChildren
  '/tree': typeof TreeRouteRouteWithChildren
  '/(alternatives)/i': typeof alternativesIRouteRouteWithChildren
  '/build/$buildId': typeof BuildBuildIdRouteRouteWithChildren
  '/hardware/$hardwareId': typeof HardwareHardwareIdRouteRouteWithChildren
  '/issue/$issueId': typeof IssueIssueIdRouteRouteWithChildren
  '/test/$testId': typeof TestTestIdRouteRouteWithChildren
  '/tree/$treeId': typeof TreeTreeIdRouteRouteWithChildren
  '/hardware/': typeof HardwareIndexRoute
  '/issue/': typeof IssueIndexRoute
  '/tree/': typeof TreeIndexRoute
  '/(alternatives)/b/$buildId': typeof alternativesBBuildIdRouteRouteWithChildren
  '/(alternatives)/i/$issueId': typeof alternativesIIssueIdRouteRouteWithChildren
  '/(alternatives)/t/$testId': typeof alternativesTTestIdRouteRouteWithChildren
  '/hardware/$hardwareId/boot': typeof HardwareHardwareIdBootRouteRouteWithChildren
  '/hardware/$hardwareId/build': typeof HardwareHardwareIdBuildRouteRouteWithChildren
  '/hardware/$hardwareId/test': typeof HardwareHardwareIdTestRouteRouteWithChildren
  '/(alternatives)/i/': typeof alternativesIIndexRoute
  '/build/$buildId/': typeof BuildBuildIdIndexRoute
  '/hardware/$hardwareId/': typeof HardwareHardwareIdIndexRoute
  '/issue/$issueId/': typeof IssueIssueIdIndexRoute
  '/test/$testId/': typeof TestTestIdIndexRoute
  '/tree/$treeId/': typeof TreeTreeIdIndexRoute
  '/tree/$treeId/test/$testId': typeof TreeTreeIdTestTestIdRouteRouteWithChildren
  '/(alternatives)/b/$buildId/': typeof alternativesBBuildIdIndexRoute
  '/(alternatives)/i/$issueId/': typeof alternativesIIssueIdIndexRoute
  '/(alternatives)/t/$testId/': typeof alternativesTTestIdIndexRoute
  '/hardware/$hardwareId/boot/': typeof HardwareHardwareIdBootIndexRoute
  '/hardware/$hardwareId/build/': typeof HardwareHardwareIdBuildIndexRoute
  '/hardware/$hardwareId/test/': typeof HardwareHardwareIdTestIndexRoute
  '/tree/$treeName/$branch/': typeof TreeTreeNameBranchIndexRoute
  '/hardware/$hardwareId/boot/$bootId/': typeof HardwareHardwareIdBootBootIdIndexRoute
  '/hardware/$hardwareId/build/$buildId/': typeof HardwareHardwareIdBuildBuildIdIndexRoute
  '/hardware/$hardwareId/test/$testId/': typeof HardwareHardwareIdTestTestIdIndexRoute
  '/tree/$treeId/build/$buildId/': typeof TreeTreeIdBuildBuildIdIndexRoute
  '/tree/$treeId/test/$testId/': typeof TreeTreeIdTestTestIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/hardware'
    | '/issue'
    | '/tree'
    | '/i'
    | '/build/$buildId'
    | '/hardware/$hardwareId'
    | '/issue/$issueId'
    | '/test/$testId'
    | '/tree/$treeId'
    | '/hardware/'
    | '/issue/'
    | '/tree/'
    | '/b/$buildId'
    | '/i/$issueId'
    | '/t/$testId'
    | '/hardware/$hardwareId/boot'
    | '/hardware/$hardwareId/build'
    | '/hardware/$hardwareId/test'
    | '/i/'
    | '/build/$buildId/'
    | '/hardware/$hardwareId/'
    | '/issue/$issueId/'
    | '/test/$testId/'
    | '/tree/$treeId/'
    | '/tree/$treeId/test/$testId'
    | '/b/$buildId/'
    | '/i/$issueId/'
    | '/t/$testId/'
    | '/hardware/$hardwareId/boot/'
    | '/hardware/$hardwareId/build/'
    | '/hardware/$hardwareId/test/'
    | '/tree/$treeName/$branch'
    | '/hardware/$hardwareId/boot/$bootId'
    | '/hardware/$hardwareId/build/$buildId'
    | '/hardware/$hardwareId/test/$testId'
    | '/tree/$treeId/build/$buildId'
    | '/tree/$treeId/test/$testId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/hardware'
    | '/issue'
    | '/tree'
    | '/i'
    | '/build/$buildId'
    | '/hardware/$hardwareId'
    | '/issue/$issueId'
    | '/test/$testId'
    | '/tree/$treeId'
    | '/b/$buildId'
    | '/i/$issueId'
    | '/t/$testId'
    | '/hardware/$hardwareId/boot'
    | '/hardware/$hardwareId/build'
    | '/hardware/$hardwareId/test'
    | '/tree/$treeName/$branch'
    | '/hardware/$hardwareId/boot/$bootId'
    | '/hardware/$hardwareId/build/$buildId'
    | '/hardware/$hardwareId/test/$testId'
    | '/tree/$treeId/build/$buildId'
    | '/tree/$treeId/test/$testId'
  id:
    | '__root__'
    | '/'
    | '/hardware'
    | '/issue'
    | '/tree'
    | '/(alternatives)/i'
    | '/build/$buildId'
    | '/hardware/$hardwareId'
    | '/issue/$issueId'
    | '/test/$testId'
    | '/tree/$treeId'
    | '/hardware/'
    | '/issue/'
    | '/tree/'
    | '/(alternatives)/b/$buildId'
    | '/(alternatives)/i/$issueId'
    | '/(alternatives)/t/$testId'
    | '/hardware/$hardwareId/boot'
    | '/hardware/$hardwareId/build'
    | '/hardware/$hardwareId/test'
    | '/(alternatives)/i/'
    | '/build/$buildId/'
    | '/hardware/$hardwareId/'
    | '/issue/$issueId/'
    | '/test/$testId/'
    | '/tree/$treeId/'
    | '/tree/$treeId/test/$testId'
    | '/(alternatives)/b/$buildId/'
    | '/(alternatives)/i/$issueId/'
    | '/(alternatives)/t/$testId/'
    | '/hardware/$hardwareId/boot/'
    | '/hardware/$hardwareId/build/'
    | '/hardware/$hardwareId/test/'
    | '/tree/$treeName/$branch/'
    | '/hardware/$hardwareId/boot/$bootId/'
    | '/hardware/$hardwareId/build/$buildId/'
    | '/hardware/$hardwareId/test/$testId/'
    | '/tree/$treeId/build/$buildId/'
    | '/tree/$treeId/test/$testId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HardwareRouteRoute: typeof HardwareRouteRouteWithChildren
  IssueRouteRoute: typeof IssueRouteRouteWithChildren
  TreeRouteRoute: typeof TreeRouteRouteWithChildren
  alternativesIRouteRoute: typeof alternativesIRouteRouteWithChildren
  BuildBuildIdRouteRoute: typeof BuildBuildIdRouteRouteWithChildren
  TestTestIdRouteRoute: typeof TestTestIdRouteRouteWithChildren
  alternativesBBuildIdRouteRoute: typeof alternativesBBuildIdRouteRouteWithChildren
  alternativesTTestIdRouteRoute: typeof alternativesTTestIdRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HardwareRouteRoute: HardwareRouteRouteWithChildren,
  IssueRouteRoute: IssueRouteRouteWithChildren,
  TreeRouteRoute: TreeRouteRouteWithChildren,
  alternativesIRouteRoute: alternativesIRouteRouteWithChildren,
  BuildBuildIdRouteRoute: BuildBuildIdRouteRouteWithChildren,
  TestTestIdRouteRoute: TestTestIdRouteRouteWithChildren,
  alternativesBBuildIdRouteRoute: alternativesBBuildIdRouteRouteWithChildren,
  alternativesTTestIdRouteRoute: alternativesTTestIdRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/hardware",
        "/issue",
        "/tree",
        "/(alternatives)/i",
        "/build/$buildId",
        "/test/$testId",
        "/(alternatives)/b/$buildId",
        "/(alternatives)/t/$testId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/hardware": {
      "filePath": "hardware/route.tsx",
      "children": [
        "/hardware/$hardwareId",
        "/hardware/"
      ]
    },
    "/issue": {
      "filePath": "issue/route.tsx",
      "children": [
        "/issue/$issueId",
        "/issue/"
      ]
    },
    "/tree": {
      "filePath": "tree/route.tsx",
      "children": [
        "/tree/$treeId",
        "/tree/",
        "/tree/$treeName/$branch/"
      ]
    },
    "/(alternatives)/i": {
      "filePath": "(alternatives)/i/route.tsx",
      "children": [
        "/(alternatives)/i/$issueId",
        "/(alternatives)/i/"
      ]
    },
    "/build/$buildId": {
      "filePath": "build/$buildId/route.tsx",
      "children": [
        "/build/$buildId/"
      ]
    },
    "/hardware/$hardwareId": {
      "filePath": "hardware/$hardwareId/route.tsx",
      "parent": "/hardware",
      "children": [
        "/hardware/$hardwareId/boot",
        "/hardware/$hardwareId/build",
        "/hardware/$hardwareId/test",
        "/hardware/$hardwareId/"
      ]
    },
    "/issue/$issueId": {
      "filePath": "issue/$issueId/route.tsx",
      "parent": "/issue",
      "children": [
        "/issue/$issueId/"
      ]
    },
    "/test/$testId": {
      "filePath": "test/$testId/route.tsx",
      "children": [
        "/test/$testId/"
      ]
    },
    "/tree/$treeId": {
      "filePath": "tree/$treeId/route.tsx",
      "parent": "/tree",
      "children": [
        "/tree/$treeId/",
        "/tree/$treeId/test/$testId",
        "/tree/$treeId/build/$buildId/"
      ]
    },
    "/hardware/": {
      "filePath": "hardware/index.tsx",
      "parent": "/hardware"
    },
    "/issue/": {
      "filePath": "issue/index.tsx",
      "parent": "/issue"
    },
    "/tree/": {
      "filePath": "tree/index.tsx",
      "parent": "/tree"
    },
    "/(alternatives)/b/$buildId": {
      "filePath": "(alternatives)/b/$buildId/route.tsx",
      "children": [
        "/(alternatives)/b/$buildId/"
      ]
    },
    "/(alternatives)/i/$issueId": {
      "filePath": "(alternatives)/i/$issueId/route.tsx",
      "parent": "/(alternatives)/i",
      "children": [
        "/(alternatives)/i/$issueId/"
      ]
    },
    "/(alternatives)/t/$testId": {
      "filePath": "(alternatives)/t/$testId/route.tsx",
      "children": [
        "/(alternatives)/t/$testId/"
      ]
    },
    "/hardware/$hardwareId/boot": {
      "filePath": "hardware/$hardwareId/boot/route.tsx",
      "parent": "/hardware/$hardwareId",
      "children": [
        "/hardware/$hardwareId/boot/",
        "/hardware/$hardwareId/boot/$bootId/"
      ]
    },
    "/hardware/$hardwareId/build": {
      "filePath": "hardware/$hardwareId/build/route.tsx",
      "parent": "/hardware/$hardwareId",
      "children": [
        "/hardware/$hardwareId/build/",
        "/hardware/$hardwareId/build/$buildId/"
      ]
    },
    "/hardware/$hardwareId/test": {
      "filePath": "hardware/$hardwareId/test/route.tsx",
      "parent": "/hardware/$hardwareId",
      "children": [
        "/hardware/$hardwareId/test/",
        "/hardware/$hardwareId/test/$testId/"
      ]
    },
    "/(alternatives)/i/": {
      "filePath": "(alternatives)/i/index.tsx",
      "parent": "/(alternatives)/i"
    },
    "/build/$buildId/": {
      "filePath": "build/$buildId/index.tsx",
      "parent": "/build/$buildId"
    },
    "/hardware/$hardwareId/": {
      "filePath": "hardware/$hardwareId/index.tsx",
      "parent": "/hardware/$hardwareId"
    },
    "/issue/$issueId/": {
      "filePath": "issue/$issueId/index.tsx",
      "parent": "/issue/$issueId"
    },
    "/test/$testId/": {
      "filePath": "test/$testId/index.tsx",
      "parent": "/test/$testId"
    },
    "/tree/$treeId/": {
      "filePath": "tree/$treeId/index.tsx",
      "parent": "/tree/$treeId"
    },
    "/tree/$treeId/test/$testId": {
      "filePath": "tree/$treeId/test/$testId/route.tsx",
      "parent": "/tree/$treeId",
      "children": [
        "/tree/$treeId/test/$testId/"
      ]
    },
    "/(alternatives)/b/$buildId/": {
      "filePath": "(alternatives)/b/$buildId/index.tsx",
      "parent": "/(alternatives)/b/$buildId"
    },
    "/(alternatives)/i/$issueId/": {
      "filePath": "(alternatives)/i/$issueId/index.tsx",
      "parent": "/(alternatives)/i/$issueId"
    },
    "/(alternatives)/t/$testId/": {
      "filePath": "(alternatives)/t/$testId/index.tsx",
      "parent": "/(alternatives)/t/$testId"
    },
    "/hardware/$hardwareId/boot/": {
      "filePath": "hardware/$hardwareId/boot/index.tsx",
      "parent": "/hardware/$hardwareId/boot"
    },
    "/hardware/$hardwareId/build/": {
      "filePath": "hardware/$hardwareId/build/index.tsx",
      "parent": "/hardware/$hardwareId/build"
    },
    "/hardware/$hardwareId/test/": {
      "filePath": "hardware/$hardwareId/test/index.tsx",
      "parent": "/hardware/$hardwareId/test"
    },
    "/tree/$treeName/$branch/": {
      "filePath": "tree/$treeName/$branch/index.tsx",
      "parent": "/tree"
    },
    "/hardware/$hardwareId/boot/$bootId/": {
      "filePath": "hardware/$hardwareId/boot/$bootId/index.tsx",
      "parent": "/hardware/$hardwareId/boot"
    },
    "/hardware/$hardwareId/build/$buildId/": {
      "filePath": "hardware/$hardwareId/build/$buildId/index.tsx",
      "parent": "/hardware/$hardwareId/build"
    },
    "/hardware/$hardwareId/test/$testId/": {
      "filePath": "hardware/$hardwareId/test/$testId/index.tsx",
      "parent": "/hardware/$hardwareId/test"
    },
    "/tree/$treeId/build/$buildId/": {
      "filePath": "tree/$treeId/build/$buildId/index.tsx",
      "parent": "/tree/$treeId"
    },
    "/tree/$treeId/test/$testId/": {
      "filePath": "tree/$treeId/test/$testId/index.tsx",
      "parent": "/tree/$treeId/test/$testId"
    }
  }
}
ROUTE_MANIFEST_END */
